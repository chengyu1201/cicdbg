options:
  logging: CLOUD_LOGGING_ONLY

substitutions:
  _REGION: asia-east1
  _AR_REPO: cicd-bluegreen-docker
  _SERVICE: cicdbg
  _NEXT_TAG: ""  # 可填 "blue" 或 "green"，留空＝自動判斷
  
steps:
  # 1) Build image
  - name: gcr.io/cloud-builders/docker
    id: build
    args:
      - build
      - -t
      - ${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_AR_REPO}/${_SERVICE}:${SHORT_SHA}
      - .

  # 2) Push image
  - name: gcr.io/cloud-builders/docker
    id: push
    args:
      - push
      - ${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_AR_REPO}/${_SERVICE}:${SHORT_SHA}

  # 3) Decide next color（改成看「流量最大」那一筆）
  - name: gcr.io/google.com/cloudsdktool/cloud-sdk:slim
    id: decide-color
    entrypoint: bash
    args:
      - -ceu
      - |
        # -e: 任一指令錯誤就退出；-u: 取未定義變數報錯；pipefail: 管線任一段錯都算
        set -euo pipefail

        # 讀使用者是否在 Trigger 的 substitutions 指定了 _NEXT_TAG（可能沒填，所以用 ${_NEXT_TAG:-}）
        USER_NEXT="${_NEXT_TAG:-}"

        if [[ -n "$$USER_NEXT" ]]; then
          # ✅ 指定了下一色：先做白名單檢查，再直接使用
          if [[ "$$USER_NEXT" != "blue" && "$$USER_NEXT" != "green" ]]; then
            echo "invalid _NEXT_TAG=$$USER_NEXT"; exit 1
          fi
          NEXT_TAG="$$USER_NEXT"                      # 這是 bash 變數（執行期）
        else
          # 用最大流量那一筆的 tag 當作「現在線上顏色」
          CURR="$(gcloud run services describe "${_SERVICE}" --region "${_REGION}" --format=json \
            | python3 -c 'import sys,json; d=json.load(sys.stdin); ts=d.get("status",{}).get("traffic",[]); c=[t for t in ts if t.get("tag")]; print((max(c, key=lambda t: (t.get("percent") or 0)).get("tag","")) if c else "")' \
          )" || true

          # ✅ 決策：現在線上若是 blue，下一次就發 green；反之亦然
          if [[ "${CURR:-blue}" == "blue" ]]; then
            NEXT_TAG=green
          else
            NEXT_TAG=blue
          fi
        fi

        # ✅ 把「下一色」寫到檔案，給後續步驟 source 使用
        #    注意：這裡用 $$NEXT_TAG，避免被 Cloud Build 當成 substitution
        echo "NEXT_TAG=$$NEXT_TAG" | tee /workspace/next_color

        # （除錯需要時可打開）
        # echo "_SERVICE=${_SERVICE} _REGION=${_REGION} CURR=${CURR:-<none>} NEXT_TAG=$$NEXT_TAG"


  # 4) Deploy new revision with NO traffic (0%), tag = NEXT_TAG
  - name: gcr.io/google.com/cloudsdktool/cloud-sdk:slim
    id: deploy-no-traffic
    entrypoint: bash
    args:
      - -ceu
      - |
        set -euo pipefail
        source /workspace/next_color
        IMAGE="${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_AR_REPO}/${_SERVICE}:${SHORT_SHA}"
        echo "Deploying image: $$IMAGE with tag: $$NEXT_TAG (no traffic)"
        gcloud run deploy "${_SERVICE}" \
          --image "$$IMAGE" \
          --region "${_REGION}" \
          --tag "$$NEXT_TAG" \
          --no-traffic \
          --service-account "${_RUNTIME_SA}" \
          --set-env-vars=APP_VERSION="${SHORT_SHA}",APP_COLOR="$$NEXT_TAG"

  # 5) Hint for manual test
  - name: gcr.io/google.com/cloudsdktool/cloud-sdk:slim
    id: hint
    entrypoint: bash
    args:
      - -ceu
      - |
        source /workspace/next_color
        echo "Deployed ${_SERVICE} new revision with tag=$$NEXT_TAG at 0%."
        echo "到 Cloud Run > ${_SERVICE} > Revisions > Tags 複製 $$NEXT_TAG 的 tag URL 測 /healthz。"

  # 6 ) 想自動切 100% 才打開下列步驟，並同樣用 $$NEXT_TAG
  - name: gcr.io/google.com/cloudsdktool/cloud-sdk:slim
    id: promote-to-100
    entrypoint: bash
    args:
      - -ceu
      - |
        source /workspace/next_color
        gcloud run services update-traffic "${_SERVICE}" \
          --region "${_REGION}" \
          --to-tags "$$NEXT_TAG=100"
        echo "Traffic switched to $$NEXT_TAG=100%"

images:
  - ${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_AR_REPO}/${_SERVICE}:${SHORT_SHA}
